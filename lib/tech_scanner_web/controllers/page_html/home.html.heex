<!-- 🌟 Beautiful tech-focused gradient background with scanning particles -->
<div class="min-h-screen relative overflow-hidden bg-gradient-to-br from-gray-900 via-emerald-900 to-gray-900">
    <!-- Animated scanning particles -->
    <div class="absolute inset-0">
        <div class="floating-particle absolute w-1 h-1 bg-emerald-300/30 rounded-full animate-pulse" style="top: 15%; left: 10%; animation-delay: 0s;"></div>
        <div class="floating-particle absolute w-2 h-2 bg-green-300/20 rounded-full animate-bounce" style="top: 70%; left: 80%; animation-delay: 1s;"></div>
        <div class="floating-particle absolute w-1.5 h-1.5 bg-teal-300/25 rounded-full animate-ping" style="top: 25%; left: 70%; animation-delay: 2s;"></div>
        <div class="floating-particle absolute w-1 h-1 bg-lime-300/30 rounded-full animate-bounce" style="top: 85%; left: 15%; animation-delay: 3s;"></div>
        <div class="floating-particle absolute w-2 h-2 bg-emerald-300/20 rounded-full animate-pulse" style="top: 45%; left: 25%; animation-delay: 4s;"></div>
        <div class="floating-particle absolute w-1.5 h-1.5 bg-gray-300/15 rounded-full animate-ping" style="top: 60%; left: 90%; animation-delay: 5s;"></div>
    </div>

    <!-- Main container -->
    <div class="flex flex-col items-center justify-center min-h-screen p-4 py-6">
        <div class="w-full max-w-2xl backdrop-blur-xl bg-white/10 border border-white/20 rounded-3xl shadow-2xl p-6">

            <!-- 🚀 Header Section -->
            <div class="text-center mb-6">
                <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-emerald-500 to-green-600 rounded-full mb-3 shadow-lg">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
                <h1 class="text-4xl font-bold bg-gradient-to-r from-white via-emerald-200 to-green-200 bg-clip-text text-transparent mb-2">
                    Kaliko
                </h1>
                <p class="text-white/90 text-lg mb-2">Web Technology Scanner</p>
                <p class="text-white/70 text-sm max-w-md mx-auto">Analyze and detect the technologies powering any website. Enter a domain to scan for frameworks, libraries, servers, and development tools.</p>
                <div class="w-20 h-0.5 bg-gradient-to-r from-emerald-500 to-green-600 mx-auto mt-3 rounded-full"></div>
            </div>

            <!-- 🔍 Input Form -->
            <form id="scanForm" class="space-y-4">
                <div class="space-y-2">
                    <label class="text-white/90 font-semibold text-sm tracking-wide block" for="domain">
                        WEBSITE URL
                    </label>
                    <div class="relative">
                        <input
                            type="url"
                            id="domain"
                            name="domain"
                            placeholder="https://example.com"
                            class="w-full px-4 py-3 bg-white/10 border border-white/30 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-300"
                            required
                        >
                        <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                            <svg class="w-5 h-5 text-white/50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0 9c-5 0-9-4-9-9m9 9c5 0 9-4 9-9m-9 9v-9m0 9c-4-5-4-9 0-9"></path>
                            </svg>
                        </div>
                    </div>
                </div>

                <!-- Scan Button -->
                <button type="submit" class="w-full py-3 bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 text-white font-bold rounded-xl transition-all duration-300 hover:shadow-xl focus:outline-none focus:ring-4 focus:ring-emerald-500/50 disabled:opacity-50">
                    <div class="flex items-center justify-center space-x-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                        <span id="buttonText">Scan Technologies</span>
                    </div>
                </button>
            </form>

            <!-- 📊 Results Section -->
            <div id="resultsSection" class="mt-6 space-y-4 hidden">
                <!-- Scan Info -->
                <div class="bg-black/20 backdrop-blur-sm border border-white/30 rounded-xl p-3">
                    <div class="flex items-center justify-between mb-2">
                        <span class="text-white/80 text-xs font-medium">SCAN RESULTS</span>
                        <span id="scanTime" class="text-emerald-300 text-xs"></span>
                    </div>
                    <p id="scannedDomain" class="text-white font-mono text-sm break-all"></p>
                </div>

                <!-- Technologies Grid -->
                <div id="technologiesGrid" class="grid grid-cols-1 md:grid-cols-2 gap-3 max-h-60 overflow-y-auto">
                    <!-- Technology cards will be inserted here -->
                </div>

                <!-- Action Buttons -->
                <div class="flex gap-3">
                    <button id="scanAgain" class="flex-1 py-2 bg-teal-600 hover:bg-teal-700 text-white font-semibold rounded-lg text-sm transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-teal-500/50">
                        Scan Another Site
                    </button>
                    <button id="exportResults" class="flex-1 py-2 bg-lime-600 hover:bg-lime-700 text-white font-semibold rounded-lg text-sm transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-lime-500/50">
                        Export JSON
                    </button>
                </div>
            </div>

            <!-- 💡 Examples Section -->
            <div id="examplesSection" class="mt-6">
                <h3 class="text-white/90 font-semibold text-xs tracking-wide mb-3">TRY THESE EXAMPLES</h3>
                <div class="grid grid-cols-2 gap-2">
                    <button class="example-btn text-left p-2 bg-white/5 hover:bg-white/10 border border-white/20 rounded-lg transition-all duration-300" data-domain="github.com">
                        <div class="text-white font-medium text-xs">GitHub</div>
                        <div class="text-white/60 text-xs">github.com</div>
                    </button>
                    <button class="example-btn text-left p-2 bg-white/5 hover:bg-white/10 border border-white/20 rounded-lg transition-all duration-300" data-domain="wordpress.com">
                        <div class="text-white font-medium text-xs">WordPress</div>
                        <div class="text-white/60 text-xs">wordpress.com</div>
                    </button>
                    <button class="example-btn text-left p-2 bg-white/5 hover:bg-white/10 border border-white/20 rounded-lg transition-all duration-300" data-domain="laravel.com">
                        <div class="text-white font-medium text-xs">Laravel</div>
                        <div class="text-white/60 text-xs">laravel.com</div>
                    </button>
                    <button class="example-btn text-left p-2 bg-white/5 hover:bg-white/10 border border-white/20 rounded-lg transition-all duration-300" data-domain="nextjs.org">
                        <div class="text-white font-medium text-xs">Next.js</div>
                        <div class="text-white/60 text-xs">nextjs.org</div>
                    </button>
                </div>
            </div>
        </div>

        <!-- Attribution -->
        <div class="text-center mt-4">
            <p class="text-white/60 text-xs">A project by <span class="text-white/80 font-medium">Syaeful Bahri</span></p>
        </div>
    </div>
</div>

<!-- 🎨 Custom CSS for enhanced styling -->
<style>
    /* Floating particles animation */
    @keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }

    .floating-particle {
        animation: float 8s ease-in-out infinite;
    }

    /* Input focus glow effect */
    input:focus {
        box-shadow: 0 0 20px rgba(16, 185, 129, 0.4);
    }

    /* Scan results animation */
    @keyframes slideIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .slide-in {
        animation: slideIn 0.5s ease-out;
    }

    /* Technology card hover effects */
    .tech-card {
        transition: all 0.3s ease;
    }

    .tech-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    }

    /* Confidence level indicators */
    .confidence-high { background: linear-gradient(135deg, #10b981, #059669); }
    .confidence-medium { background: linear-gradient(135deg, #f59e0b, #d97706); }
    .confidence-low { background: linear-gradient(135deg, #ef4444, #dc2626); }

    /* Loading spinner */
    .spinner {
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top: 2px solid #fff;
        width: 20px;
        height: 20px;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<!-- 🚀 Enhanced JavaScript for beautiful interactions -->
<script>
    // DOM Element References
    const scanForm = document.getElementById("scanForm");
    const domainInput = document.getElementById("domain");
    const buttonText = document.getElementById("buttonText");
    const resultsSection = document.getElementById("resultsSection");
    const examplesSection = document.getElementById("examplesSection");
    const scannedDomain = document.getElementById("scannedDomain");
    const scanTime = document.getElementById("scanTime");
    const technologiesGrid = document.getElementById("technologiesGrid");
    const scanAgainBtn = document.getElementById("scanAgain");
    const exportBtn = document.getElementById("exportResults");
    const exampleBtns = document.querySelectorAll(".example-btn");

    let lastScanResults = null;

    // Example button clicks
    exampleBtns.forEach(btn => {
        btn.addEventListener("click", () => {
            const domain = btn.getAttribute("data-domain");
            domainInput.value = domain;
            domainInput.focus();
        });
    });

    // Form submission
    scanForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const domain = domainInput.value.trim();
        if (!domain) return;

        // Clean domain format
        const cleanDomain = domain.replace(/^https?:\/\//, '');

        await scanWebsite(cleanDomain);
    });

    // Scan again functionality
    scanAgainBtn.addEventListener("click", () => {
        resultsSection.classList.add("hidden");
        examplesSection.classList.remove("hidden");
        domainInput.value = "";
        domainInput.focus();
    });

    // Export functionality
    exportBtn.addEventListener("click", () => {
        if (lastScanResults) {
            const blob = new Blob([JSON.stringify(lastScanResults, null, 2)],
                                 { type: 'application/json' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `kaliko-scan-${lastScanResults.domain}-${Date.now()}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }
    });

    // Main scan function
    async function scanWebsite(domain) {
        const submitBtn = scanForm.querySelector('button[type="submit"]');

        // Set loading state
        submitBtn.disabled = true;
        buttonText.innerHTML = '<div class="spinner"></div><span>Scanning...</span>';

        try {
            const response = await fetch('/api/scan', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ domain: domain })
            });

            const data = await response.json();

            if (response.ok) {
                lastScanResults = data;
                displayResults(data);
            } else {
                showError(data.error || 'Failed to scan website');
            }
        } catch (error) {
            showError('Network error. Please try again.');
        } finally {
            // Restore button
            submitBtn.disabled = false;
            buttonText.textContent = 'Scan Technologies';
        }
    }

    // Display scan results
    function displayResults(data) {
        examplesSection.classList.add("hidden");

        // Update scan info
        scannedDomain.textContent = data.domain;
        scanTime.textContent = new Date(data.scan_time).toLocaleString();

        // Clear and populate technologies grid
        technologiesGrid.innerHTML = '';

        if (data.technologies && data.technologies.length > 0) {
            data.technologies.forEach(tech => {
                const techCard = createTechnologyCard(tech);
                technologiesGrid.appendChild(techCard);
            });
        } else {
            technologiesGrid.innerHTML = '<div class="col-span-2 text-center text-white/70 py-8">No technologies detected</div>';
        }

        // Show results with animation
        resultsSection.classList.remove("hidden");
        resultsSection.classList.add("slide-in");
    }

    // Create technology card
    function createTechnologyCard(tech) {
        const card = document.createElement('div');
        card.className = 'tech-card bg-white/10 backdrop-blur-sm border border-white/30 rounded-xl p-3 hover:bg-white/15 transition-all duration-300';

        const confidenceClass = `confidence-${tech.confidence}`;

        card.innerHTML = `
            <div class="flex items-start justify-between mb-2">
                <div class="flex-1">
                    <h4 class="text-white font-semibold text-sm">${tech.name}</h4>
                    <p class="text-white/70 text-xs">${tech.category}</p>
                </div>
                <div class="flex flex-col items-end">
                    <span class="px-2 py-1 ${confidenceClass} text-white text-xs font-medium rounded-full">
                        ${tech.confidence.toUpperCase()}
                    </span>
                </div>
            </div>
            <div class="flex items-center text-white/60 text-xs">
                <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
                Detected
            </div>
        `;

        return card;
    }

    // Show error message
    function showError(message) {
        technologiesGrid.innerHTML = `
            <div class="col-span-2 bg-red-500/20 border border-red-500/30 rounded-2xl p-4">
                <div class="flex items-center text-red-300">
                    <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                    </svg>
                    ${message}
                </div>
            </div>
        `;

        examplesSection.classList.add("hidden");
        resultsSection.classList.remove("hidden");
        resultsSection.classList.add("slide-in");
    }

    // Auto-focus on domain input
    window.addEventListener('load', () => {
        domainInput.focus();
    });
</script>